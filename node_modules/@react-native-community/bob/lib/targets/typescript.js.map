{"version":3,"sources":["../../src/targets/typescript.ts"],"names":["build","root","output","report","options","info","chalk","blue","path","relative","project","tsconfig","join","fs","pathExists","config","JSON5","parse","readFile","compilerOptions","conflicts","noEmit","undefined","push","emitDeclarationOnly","declarationDir","outDir","length","warn","reduce","acc","curr","gray","yellow","e","Error","tsc","resolve","spawn","sync","stdout","toString","trim","stdio","replace","success","error","message"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport path from 'path';\nimport fs from 'fs-extra';\nimport spawn from 'cross-spawn';\nimport del from 'del';\nimport JSON5 from 'json5';\nimport { platform } from 'os';\nimport { Input } from '../types';\n\ntype Options = Input & {\n  options?: { project?: string; tsc?: string };\n};\n\nexport default async function build({\n  root,\n  output,\n  report,\n  options,\n}: Options) {\n  report.info(\n    `Cleaning up previous build at ${chalk.blue(path.relative(root, output))}`\n  );\n\n  await del([output]);\n\n  report.info(`Generating type definitions with ${chalk.blue('tsc')}`);\n\n  const project = options?.project ? options.project : 'tsconfig.json';\n  const tsconfig = path.join(root, project);\n\n  try {\n    if (await fs.pathExists(tsconfig)) {\n      try {\n        const config = JSON5.parse(await fs.readFile(tsconfig, 'utf-8'));\n\n        if (config.compilerOptions) {\n          const conflicts: string[] = [];\n\n          if (config.compilerOptions.noEmit !== undefined) {\n            conflicts.push('compilerOptions.noEmit');\n          }\n\n          if (config.compilerOptions.emitDeclarationOnly !== undefined) {\n            conflicts.push('compilerOptions.emitDeclarationOnly');\n          }\n\n          if (config.compilerOptions.declarationDir) {\n            conflicts.push('compilerOptions.declarationDir');\n          }\n\n          if (\n            config.compilerOptions.outDir &&\n            path.join(root, config.compilerOptions.outDir) !== output\n          ) {\n            conflicts.push('compilerOptions.outDir');\n          }\n\n          if (conflicts.length) {\n            report.warn(\n              `Found following options in the config file which can conflict with the CLI options. Please remove them from ${chalk.blue(\n                project\n              )}:${conflicts.reduce(\n                (acc, curr) =>\n                  acc + `\\n${chalk.gray('-')} ${chalk.yellow(curr)}`,\n                ''\n              )}`\n            );\n          }\n        }\n      } catch (e) {\n        report.warn(\n          `Couldn't parse '${project}'. There might be validation errors.`\n        );\n      }\n    } else {\n      throw new Error(\n        `Couldn't find a ${chalk.blue('tsc')} in the project root.`\n      );\n    }\n\n    let tsc = options?.tsc\n      ? path.resolve(root, options.tsc)\n      : path.resolve(root, 'node_modules', '.bin', 'tsc') +\n        (platform() === 'win32' ? '.cmd' : '');\n\n    if (!(await fs.pathExists(tsc))) {\n      tsc = spawn.sync('which', ['tsc']).stdout.toString().trim();\n\n      report.warn(\n        `Using a global version of ${chalk.blue(\n          'tsc'\n        )}. Consider adding ${chalk.blue('typescript')} to your ${chalk.blue(\n          'devDependencies'\n        )} or specifying the ${chalk.blue(\n          'tsc'\n        )} option for the typescript target.`\n      );\n    }\n\n    if (await fs.pathExists(tsc)) {\n      spawn.sync(\n        tsc,\n        [\n          '--pretty',\n          '--declaration',\n          '--emitDeclarationOnly',\n          '--project',\n          project,\n          '--outDir',\n          output,\n        ],\n        { stdio: 'inherit' }\n      );\n\n      await del([\n        path.join(output, project.replace(/\\.json$/, '.tsbuildinfo')),\n      ]);\n\n      report.success(\n        `Wrote definition files to ${chalk.blue(path.relative(root, output))}`\n      );\n    } else {\n      throw new Error(\n        `The ${chalk.blue(\n          'tsc'\n        )} binary doesn't seem to be installed under ${chalk.blue(\n          'node_modules'\n        )} or present in $PATH. Make sure you have added ${chalk.blue(\n          'typescript'\n        )} to your ${chalk.blue('devDependencies')} or specify the ${chalk.blue(\n          'tsc'\n        )} option for typescript.`\n      );\n    }\n  } catch (e) {\n    if (e.stdout) {\n      report.error(\n        `Errors found when building definition files:\\n${e.stdout.toString()}`\n      );\n    } else {\n      report.error(e.message);\n    }\n\n    throw new Error('Failed to build definition files.');\n  }\n}\n"],"file":"typescript.js"}